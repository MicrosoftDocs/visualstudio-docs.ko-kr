### YamlMime:FAQ
metadata:
  title: EditorConfig 및 분석기
  ms.date: 03/11/2019
  description: Visual Studio .NET Compiler Platform 기반 코드 분석에 대해 알아봅니다. EditorConfig 파일, 규칙 집합 및 기타 항목에 대한 질문에 대한 답변을 참조하세요.
  ms.custom: SEO-VS-2020
  ms.topic: conceptual
  helpviewer_keywords:
  - analyzers, faq
  author: mikejo5000
  ms.author: mikejo
  manager: jmartens
  ms.workload:
  - multiple
  ms.openlocfilehash: a9ff57daf22d61758b3bbc7d99beb6d2555b7e18
  ms.sourcegitcommit: d4887ef2ca97c55e2dad9f179eec2c9631d91c95
  ms.translationtype: MT
  ms.contentlocale: ko-KR
  ms.lasthandoff: 05/06/2021
  ms.locfileid: "108800310"
title: 코드 분석 FAQ
summary: 이 페이지에는 Visual Studio .NET Compiler Platform 기반 코드 분석에 대한 질문과 대답이 포함되어 있습니다.
sections:
- name: 코드 분석과 EditorConfig 비교
  questions:
  - question: >
      코드 스타일 확인에 코드 분석 또는 EditorConfig를 사용해야 합니까?
    answer: >
      코드 분석 및 EditorConfig 파일은 함께 작동합니다. [EditorConfig 파일](/dotnet/fundamentals/code-analysis/code-style-rule-options) 또는 [텍스트 편집기 옵션](../ide/code-styles-and-code-cleanup.md) 페이지에서 코드 스타일을 정의하는 경우 실제로 Visual Studio 기본 제공되는 코드 분석기를 구성하게 됩니다. EditorConfig 파일을 사용하여 분석기 규칙을 사용하거나 사용하지 않도록 설정하고 NuGet 분석기 패키지를 구성할 수도 있습니다.
- name: EditorConfig와 규칙 집합 비교
  questions:
  - question: >
      규칙 집합 또는 EditorConfig 파일을 사용하여 분석기를 구성해야 합니까?
    answer: >
      규칙 집합 및 EditorConfig 파일은 공존할 수 있으며 분석기를 구성하는 데 사용할 수 있습니다. EditorConfig 파일 및 규칙 집합을 모두 사용하면 규칙을 사용하거나 사용하지 않도록 설정하고 심각도를 설정할 수 있습니다.


      그러나 EditorConfig 파일은 규칙을 구성하는 추가적인 방법도 제공합니다.


      - .NET 코드 품질 분석기의 경우 EditorConfig 파일을 사용하여 [분석할 코드 형식을 정의할 수](/dotnet/fundamentals/code-analysis/code-quality-rule-options)있습니다.

      - Visual Studio 기본 제공되는 .NET 코드 스타일 분석기에서는 EditorConfig 파일을 사용하여 코드베이스에 대한 [기본 코드 스타일을 정의할](/dotnet/fundamentals/code-analysis/code-style-rule-options) 수 있습니다.


      규칙 집합 및 EditorConfig 파일 외에도 일부 분석기는 C# 및 VB 컴파일러에 대한 [추가 파일로](../ide/build-actions.md#build-action-values) 표시된 텍스트 파일을 사용하여 구성됩니다.


      > [!NOTE]

      > - EditorConfig 파일은 규칙을 사용하도록 설정하고 Visual Studio 2019 버전 16.3 이상에서만 해당 심각도를 설정하는 데 사용할 수 있습니다.

      > - EditorConfig 파일은 레거시 분석을 구성하는 데 사용할 수 없지만 규칙 집합은 사용할 수 있습니다.
- name: CI 빌드에서 코드 분석
  questions:
  - question: >
      CI (연속 통합) 빌드에서 .NET Compiler Platform 기반 코드 분석이 작동 하나요?
    answer: >
      예. NuGet 패키지에서 설치 된 분석기의 경우 이러한 규칙은 CI 빌드 중을 포함 하 여 [빌드 시에 적용](roslyn-analyzers-overview.md#build-errors)됩니다. CI 빌드에서 사용 되는 분석기는 규칙 집합과 EditorConfig 파일의 규칙 구성을 모두 고려 합니다. 현재 Visual Studio에 기본 제공 되는 코드 분석기는 NuGet 패키지로 사용할 수 없으므로 이러한 규칙은 CI 빌드에서 시행 되지 않습니다.
- name: IDE 분석기와 StyleCop 비교
  questions:
  - question: >
      Visual Studio IDE 코드 분석기와 StyleCop 분석기 간의 차이점은 무엇 인가요?
    answer: >
      Visual Studio IDE에는 코드 스타일 및 품질 문제를 모두 검색 하는 기본 제공 분석기가 포함 되어 있습니다. 이러한 규칙은 도입 된 새로운 언어 기능을 사용 하 고 코드의 유지 관리 효율성을 향상 시키는 데 도움이 됩니다. IDE 분석기는 Visual Studio 릴리스 마다 지속적으로 업데이트 됩니다.


      [StyleCop 분석기](https://github.com/DotNetAnalyzers/StyleCopAnalyzers) 는 코드에서 스타일 일관성을 검사 하는 NuGet 패키지로 설치 된 타사 분석기입니다. 일반적으로 StyleCop 규칙을 사용 하 여 코드 베이스에 대 한 특정 스타일을 권장 하지 않고 개인 기본 설정을 지정할 수 있습니다.
- name: 코드 분석기와 레거시 분석 비교
  questions:
  - question: >
      레거시 분석과 .NET Compiler Platform 기반 코드 분석의 차이점은 무엇 인가요?
    answer: >
      .NET Compiler Platform 기반 코드 분석은 컴파일 중에 소스 코드를 실시간으로 분석 하는 반면 레거시 분석은 빌드가 완료 된 후 이진 파일을 분석 합니다. 자세한 내용은 [.NET Compiler Platform 기반 분석 및 레거시 분석](../code-quality/net-analyzers-faq.yml#what-s-the-difference-between-legacy-fxcop-and--net-analyzers-)을 참조 하세요.
- name: FxCop 분석기와 .NET 분석기 비교
  questions:
  - question: >
      FxCop 분석기와 .NET 분석기 간의 차이점은 무엇 인가요?
    answer: >
      FxCop 분석기와 .NET 분석기는 모두 FxCop CA 규칙의 .NET Compiler Platform ("Roslyn") 분석기 구현을 나타냅니다. Visual Studio 2019 16.8 및 .NET 5.0 이전에 이러한 분석기는 `Microsoft.CodeAnalysis.FxCopAnalyzers` [NuGet 패키지로](https://www.nuget.org/packages/Microsoft.CodeAnalysis.FxCopAnalyzers)제공 됩니다. Visual Studio 2019 16.8 및 .NET 5.0부터 이러한 분석기는 [.NET SDK 에 포함됩니다.](/dotnet/fundamentals/code-analysis/overview) `Microsoft.CodeAnalysis.NetAnalyzers` [NuGet 패키지로도](https://www.nuget.org/packages/Microsoft.CodeAnalysis.NetAnalyzers)사용할 수 있습니다. [FxCop 분석기에서 .NET 분석기로 마이그레이션하는 것이](migrate-from-fxcop-analyzers-to-net-analyzers.md)좋습니다.
- name: 경고를 오류로 처리
  questions:
  - question: >
      내 프로젝트는 빌드 옵션을 사용하여 경고를 오류로 처리합니다. 레거시 분석에서 소스 코드 분석으로 마이그레이션한 후 이제 모든 코드 분석 경고가 오류로 표시됩니다. 이를 방지할 수 있는 방법은 무엇인가요?
    answer: >
      코드 분석 경고가 오류로 처리되지 않도록 하려면 다음 단계를 수행합니다.

        1. 다음 콘텐츠를 사용하여 .props 파일을 만듭니다.

           ```xml
           <Project>
              <PropertyGroup>
                 <CodeAnalysisTreatWarningsAsErrors>false</CodeAnalysisTreatWarningsAsErrors>
              </PropertyGroup>
           </Project>
           ```

        2. .csproj 또는 .vbproj 프로젝트 파일에 줄을 추가하여 이전 단계에서 만든 .props 파일을 가져옵니다. 이 줄은 분석기 .props 파일을 가져오는 줄 앞에 배치해야 합니다. 예를 들어 .props 파일의 이름이 codeanalysis.props인 경우:

           ```xml
           ...
           <Import Project="..\..\codeanalysis.props" Condition="Exists('..\..\codeanalysis.props')" />
           <Import Project="..\packages\Microsoft.CodeAnalysis.NetAnalyzers.5.0.0\build\Microsoft.CodeAnalysis.NetAnalyzers.props" Condition="Exists('..\packages\Microsoft.CodeAnalysis.NetAnalyzers.5.0.0\build\Microsoft.CodeAnalysis.NetAnalyzers.props')" />
           ...
           ```
- name: 코드 분석 솔루션 속성 페이지
  questions:
  - question: >
      솔루션의 Code Analysis 속성 페이지는 어디에 있나요?
    answer: >
      솔루션 수준의 Code Analysis 속성 페이지가 더 안정적인 공유 속성 그룹을 위해 제거되었습니다. 프로젝트 수준에서 Code Analysis 관리하기 위해 Code Analysis 속성 페이지를 계속 사용할 수 있습니다. (관리되는 프로젝트의 경우 규칙 구성을 위해 규칙 집합에서 EditorConfig로 마이그레이션하는 것이 좋습니다.)  솔루션 또는 리포지토리의 여러/모든 프로젝트에서 규칙 집합을 공유하기 위해 공유 props/targets 파일 또는 *Directory.props/Directory.targets* 파일에서 [CodeAnalysisRuleSet](../code-quality/using-rule-sets-to-group-code-analysis-rules.md#specify-a-rule-set-for-a-project) 속성으로 속성 그룹을 정의하는 것이 좋습니다. 모든 프로젝트에서 가져오는 이러한 일반적인 props 또는 대상이 없는 경우 디렉터리 또는 하위 디렉터리에 정의된 모든 프로젝트 파일에서 자동으로 가져오는 최상위 솔루션 디렉터리의 [Directory.props 또는 Directory.targets](../msbuild/customize-your-build.md) 파일에 이러한 속성 그룹을 추가하는 것이 좋습니다.
additionalContent: "\n## <a name=\"see-also\"></a>추가 정보\n   - [분석기 개요](roslyn-analyzers-overview.md)\n   - [EditorConfig에 대한 .NET 코딩 규칙 설정](/dotnet/fundamentals/code-analysis/code-style-rule-options)"
